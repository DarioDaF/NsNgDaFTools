"use strict";

// Require CWD to be in the module folder

/*************************************************/
/* DaF Local Module Template                     */
/* for NativeScript Angular - 2018 Dario Fagotto */
/*************************************************/

const VERSION = "1.2"

const HEADER = `// This code was generated by DaF Local Module Template V. ${VERSION}`;

const fs = require("fs");

function titleCase(s) {
  return s.slice(0, 1).toUpperCase() + s.slice(1);
}

function convName(s) {
  return s.split("-").map(titleCase).join("");
}

module.exports = {
  genNsNgModuleTemplate: function(name) {
    const cname = convName(name);

    fs.writeFile(`./${name}.module.ts`, `${HEADER}

import { NgModule, NO_ERRORS_SCHEMA } from "@angular/core";
import { Routes } from "@angular/router";
import { NativeScriptCommonModule } from "nativescript-angular/common";
import { NativeScriptRouterModule } from "nativescript-angular/router";

import * as dafComps from "./_daf_comps";
import { COMMON_MODS } from "~/common-modules"

const routes: Routes = [
  { path: "", component: dafComps.${cname}Component },
  // Define extra relative routes (for global ones use the main router)
];

@NgModule({
  imports: [
    NativeScriptCommonModule, // Mandatory
    NativeScriptRouterModule.forChild(routes),
    ...COMMON_MODS,
    // Import eventual extra local modules
    // for widely used ones use "common-modules"
    // for singleton services set "providedIn" to "root"
  ],
  exports: [
    NativeScriptRouterModule
  ],
  declarations: [
    ...dafComps.LOCAL_COMPS
  ],
  schemas: [
    NO_ERRORS_SCHEMA
  ]
})
export class ${cname}Module { }
`, (e) => {
      if(e !== null) {
        throw e;
      }
    });
  }
};

if(require.main === module) {
  // process.argv = ["node", "<filename>.js", ...];

  function helpCLI() {
    console.error("Invalid arguments: expected <module-file-name> [<module-directory>]\n");
  }

  if((process.argv.length < 3) || (process.argv.length > 4)) {
    helpCLI();
    process.exit(1);
  }

  const name = process.argv[2];

  if(process.argv.length >= 4) {
    process.chdir(process.argv[3]);
  } else {
    process.chdir(`./app/${name}`);
  }

  module.exports.genNsNgModuleTemplate(name);
}
